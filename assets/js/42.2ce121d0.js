(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{408:function(e,r,s){"use strict";s.r(r);var l=s(45),t=Object(l.a)({},(function(){var e=this,r=e.$createElement,s=e._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("手动实现Promise.all()函数是面试中常做的现场coding考察，那么如何实现呢？我们先来看看Promise.all()的用法。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("COPYPromise.all([p1, p2, p3]).then(result => {\n    console.log(result)\n})\n")])])]),s("p",[e._v("Promise.all()方法接受一个数组为参数，数组中是promise，如果数组中的promise都是resolve状态，那么Promise.all()正常返回resolve,返回的数据为一个数组，就是参数中每个promise的结果组成的数组。如果promise.all()中任何一个是reject，那么promise.all()直接reject。\n所以Promise.all()的特点可以总结为：")]),e._v(" "),s("ul",[s("li",[e._v("1、接收一个 Promise 实例的数组或具有 Iterator 接口的对象，")]),e._v(" "),s("li",[e._v("2、如果元素不是 Promise 对象，则使用 Promise.resolve 转成 Promise 对象")]),e._v(" "),s("li",[e._v("3、如果全部成功，状态变为 resolved，返回值将组成一个数组传给回调")]),e._v(" "),s("li",[e._v("4、只要有一个失败，状态就变为 rejected，返回值将直接传递给回调all() 的返回值也是新的 Promise 对象")])]),e._v(" "),s("p",[e._v("来看具体代码：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("COPY//  假设我们已经实现了_Promise\n_Promise.prototype.all = (promiseList) => {\n    return new _Promise((resolve, reject) => {\n        if (!Array.isArray(promiseList)) {\n            reject(new TypeError('参数错误！'))\n        }\n        let count = 0\n        let valueList = new Array(promiseList.length)\n        promiseList.forEach((promise, index) => {\n            _Promise.resolve(promise).then(result => {\n                count++\n                valueList[index] = result  //  将每次返回的结果搜集起来\n                if (count === promiseList.length) {\n                    //  表示所有的promise都有结果，最终将所有的结果都resolve出去\n                    resolve(valueList)\n                }\n            }, err => reject(err))\n        })\n    })\n}\n")])])]),s("p",[e._v("看看，其实很简单。")])])}),[],!1,null,null,null);r.default=t.exports}}]);